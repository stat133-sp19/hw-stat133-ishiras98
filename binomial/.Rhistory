#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed binomial probability
bin_probability = function(success, trials, prob){
if (!(check_trials(trials))){
stop("invalid trials value")
}
if (!(check_prob(prob))){
stop("invalid prob value")
}
if (!(check_success(success, trials))){
stop("invalid success value")
}
else{
probability = (bin_choose(trials,success))*
(prob^success)*((1-prob)^(trials-success))
return(probability)
}
}
### 1.5) Function bin_distribution
#' @title binomial distribution
#' @description computes the binomial distribution given number of trials and probability of success
#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed binomial probability
bin_distribution = function(trials, prob){
success <- 0:trials
prob <- bin_probability(success, trials, prob)
object <- data.frame(success, prob)
class(object) = c("bindis", "data.frame")
return(object)
}
plot.bindis <- function(x) {
barplot(x$prob, width=1)
}
##1.6 Bin Cumulative
bin_cumulative = function(trials, prob){
success <- 0:trials
prob <- bin_probability(success, trials, prob)
object <- data.frame(success, prob, cumulative = cumsum(prob))
class(object) = c("bincum", "data.frame")
return(object)
}
plot.bincum <- function(x) {
plot(x$success, x$cumulative)
}
##1.7 Bin Variable
bin_variable <- function(trials, prob) {
if (!(check_trials(trials))){
stop("invalid trials value")
}
if (!(check_prob(prob))){
stop("invalid prob value")
}
res <- list(trials = trials, prob = prob)
class(res) <- "binvar"
return(res)
}
print.binvar <- function(x) {
cat('"Binomial variable""\n\n')
cat("Parameters\n")
cat("- Number of trials:", x$trials, "\n")
cat("- Prob of success:", x$prob, "\n")
invisible(x)
}
summary.binvar <- function(x) {
freqs <- data.frame(
trials = x$trials,
prob = x$prob,
mean = aux_mean(x$trials, x$prob),
variance = aux_variance(x$trials, x$prob),
mode = aux_mode(x$trials, x$prob),
skewness = aux_skewness(x$trials, x$prob),
kurtosis = aux_kurtosis(x$trials, x$prob)
)
obj <- list(freqs = freqs)
class(obj) <- "summary.binvar"
return(obj)
}
print.summary.binvar <- function(x) {
cat('"Binomial variable""\n\n')
cat("Parameters\n")
cat("- Number of trials:", x$freqs$trials, "\n")
cat("- Prob of success:", x$freqs$prob, "\n\n")
cat("Measures\n")
cat("- Mean:", x$freqs$mean, "\n")
cat("- Variance:", x$freqs$variance, "\n")
cat("- Mode:", x$freqs$mode, "\n")
cat("- Skewness:", x$freqs$skewness, "\n")
cat("- Kurtosis:", x$freqs$kurtosis)
invisible(x)
}
##1.9
bin_mean <- function(trials, prob) {
if (!(check_trials(trials))){
stop("invalid trials value")
}
if (!(check_prob(prob))){
stop("invalid prob value")
}
return(aux_mean(trials, prob))
}
bin_variance <- function(trials, prob) {
if (!(check_trials(trials))){
stop("invalid trials value")
}
if (!(check_prob(prob))){
stop("invalid prob value")
}
return(aux_variance(trials, prob))
}
bin_mode <- function(trials, prob) {
if (!(check_trials(trials))){
stop("invalid trials value")
}
if (!(check_prob(prob))){
stop("invalid prob value")
}
return(aux_mode(trials, prob))
}
bin_skewness <- function(trials, prob) {
if (!(check_trials(trials))){
stop("invalid trials value")
}
if (!(check_prob(prob))){
stop("invalid prob value")
}
return(aux_skewness(trials, prob))
}
bin_kurtosis <- function(trials, prob) {
if (!(check_trials(trials))){
stop("invalid trials value")
}
if (!(check_prob(prob))){
stop("invalid prob value")
}
return(aux_kurtosis(trials, prob))
}
bin1 <- bin_variable(trials = 10, p = 0.3)
bin1
### 1.1) Private Checker Functions
# Function check_prob()
# This private function checks whether the input prob is a valid value
check_prob = function(prob){
if (prob < 0 | prob > 1) {
stop("p has to be a number between 0 and 1")
}
else {
return(TRUE)
}
}
# Function check_trials()
# This private function checks whether the number of trials is valid (non-negative)
check_trials = function(trials){
if (trials < 0){
stop("invalid trials value")
}
else {
return(TRUE)
}
}
# Function check_success()
# This private function checks whether the number of successes is a valid number (non-negative)
check_success = function(success, trials){
if (sum(success < 0) > 0){
stop("invalid success value")
}
if (sum(success > trials)>0){
stop("success cannot be greater than trials")
}
else{
return(TRUE)
}
}
### 1.2) Private Auxiliary Functions
# aux_mean returns the mean of the experiment
aux_mean = function(trials, prob) {
mean = trials * prob
return(mean)
}
# aux_variance returns the variance of the experiment
aux_variance = function(trials, prob) {
variance = (trials*prob)*(1-prob)
return(variance)
}
# aux_mode returns the mode of the experiment
aux_mode = function(trial, prob){
value = (trial + 1) * prob
if (as.integer(value) == value){
mode1 = value
mode2 = mode1 - 1
return (c(mode1, mode2))
}
else{
mode = floor(value)
return(mode)
}
}
# aux_skewness returns the skewness of a probability distribution
aux_skewness = function(trial, prob){
skewness = (1-2*prob)/sqrt((trial*prob)*(1-prob))
return(skewness)
}
# aux_kurtosis returns the shape of a probability distribution
aux_kurtosis = function(trial, prob){
kurtosis = (1- ((6*prob)*(1-prob)))/((trial*prob)*(1-prob))
return(kurtosis)
}
### 1.3) Function bin_choose()
#' @title binomial choose factor
#' @description computes the choose factor of binomial probability calculations
#' @param n numeric value for number of trials
#' @param k numeric value for number of successes
#' @return computed choose factor
bin_choose = function(n,k){
if (sum(k > n) > 0){
stop("k cannot be greater than n")
}
else{
choose = (factorial(n))/(factorial(k)*factorial(n-k))
return(choose)
}
}
### 1.4) Function bin_probability()
#' @title binomial probability
#' @description computes the probability of success
#' @param success numeric value for number of successes
#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed binomial probability
#' @export
#' @examples
#' # probability of getting 2 successes in 5 trials
#' # (assuming prob of success = 0.5)
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#'
#' # probabilities of getting 2 or less successes in 5 trials'
#' # (assuming prob of success = 0.5)
#' bin_probability(success = 0:2, trials = 5, prob = 0.5)
bin_probability = function(success, trials, prob){
if (check_trials(trials) != TRUE){
stop("invalid trials value")
}
if (check_prob(prob) != TRUE){
stop("invalid prob value")
}
if (check_success(success, trials) != TRUE){
stop("invalid success value")
}
else{
binomial = (bin_choose(trials,success))*
(prob^success)*((1-prob)^(trials-success))
return(binomial)
}
}
### 1.5) Function bin_distribution
#' @title binomial distribution
#' @description computes the binomial distribution given number of trials and probability of success
#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed binomial probability
#' @export
#' @examples
#' # binomial probability distribution
#' bin_distribution(trials = 5, prob = 0.5)
#'
#' # another one
#' bin_distribution(trials = 4, prob = 0.2)
bin_distribution = function(trials, prob){
success = 0:trials
prob = bin_probability(success, trials, prob)
object = data.frame(success = success, prob = prob)
class(object) = c("bindis", "data.frame")
return(object)
}
### Function plot_bindis
#' @export
plot_bindis = function(bin_dist){
x = barplot(bind_dist$prob, bind_dist$success, width = 1,
xlab = "successes", ylab = "probability")
return(x)
}
### 1.6) Function bin_cumulative
#' @title binomial cumulative distribution
#' @description computes the cumulative binomial distribution given number of trials and probability of success
#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed cumulative probability
#' @export
#' @examples
#' # binomial cumulative distribution
#' bin_cumulative(trials = 5, prob = 0.5)
#'
#' # another one
#' bin_distribution(trials = 4, prob = 0.2)
bin_cumulative = function(trials, prob){
success = 0:trials
prob = bin_probability(success, trials, prob)
object = data.frame(success = success, prob = prob, cumulative = cumsum(prob))
class(object) = c("bincum", "data.frame")
return(object)
}
### 1.7) Function bin_variable()
#' @title binomial random variable object
#' @description computes the cumulative binomial distribution given number of trials and probability of success
#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed binomial random variable object
#' @export
#' @examples
bin_variable = function(trials, prob){
if (check_trials(trials) != TRUE){
stop("invalid trials value")
}
if (check_prob(prob) != TRUE){
stop("invalid prob value")
}
object = list(trials = trials, prob = prob)
class(object) = "binvar"
return(object)
}
#'@export
print_binvar = function(binvar){
cat("Binomial variable")
cat("\n", "Parameters")
cat("- Number of trials:", binvar$trials)
cat("\n", "- Prob of success:", binvar$prob)
}
bin_variable(5, 05)
bin_variable(5, 0.5)
### 1.1) Private Checker Functions
# Function check_prob()
# This private function checks whether the input prob is a valid value
check_prob = function(prob){
if (prob < 0 | prob > 1) {
stop("p has to be a number between 0 and 1")
}
else {
return(TRUE)
}
}
# Function check_trials()
# This private function checks whether the number of trials is valid (non-negative)
check_trials = function(trials){
if (trials < 0){
stop("invalid trials value")
}
else {
return(TRUE)
}
}
# Function check_success()
# This private function checks whether the number of successes is a valid number (non-negative)
check_success = function(success, trials){
if (sum(success < 0) > 0){
stop("invalid success value")
}
if (sum(success > trials)>0){
stop("success cannot be greater than trials")
}
else{
return(TRUE)
}
}
### 1.2) Private Auxiliary Functions
# aux_mean returns the mean of the experiment
aux_mean = function(trials, prob) {
mean = trials * prob
return(mean)
}
# aux_variance returns the variance of the experiment
aux_variance = function(trials, prob) {
variance = (trials*prob)*(1-prob)
return(variance)
}
# aux_mode returns the mode of the experiment
aux_mode = function(trial, prob){
value = (trial + 1) * prob
if (as.integer(value) == value){
mode1 = value
mode2 = mode1 - 1
return (c(mode1, mode2))
}
else{
mode = floor(value)
return(mode)
}
}
# aux_skewness returns the skewness of a probability distribution
aux_skewness = function(trial, prob){
skewness = (1-2*prob)/sqrt((trial*prob)*(1-prob))
return(skewness)
}
# aux_kurtosis returns the shape of a probability distribution
aux_kurtosis = function(trial, prob){
kurtosis = (1- ((6*prob)*(1-prob)))/((trial*prob)*(1-prob))
return(kurtosis)
}
### 1.3) Function bin_choose()
#' @title binomial choose factor
#' @description computes the choose factor of binomial probability calculations
#' @param n numeric value for number of trials
#' @param k numeric value for number of successes
#' @return computed choose factor
bin_choose = function(n,k){
if (sum(k > n) > 0){
stop("k cannot be greater than n")
}
else{
choose = (factorial(n))/(factorial(k)*factorial(n-k))
return(choose)
}
}
### 1.4) Function bin_probability()
#' @title binomial probability
#' @description computes the probability of success
#' @param success numeric value for number of successes
#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed binomial probability
#' @export
#' @examples
#' # probability of getting 2 successes in 5 trials
#' # (assuming prob of success = 0.5)
#' bin_probability(success = 2, trials = 5, prob = 0.5)
#'
#' # probabilities of getting 2 or less successes in 5 trials'
#' # (assuming prob of success = 0.5)
#' bin_probability(success = 0:2, trials = 5, prob = 0.5)
bin_probability = function(success, trials, prob){
if (check_trials(trials) != TRUE){
stop("invalid trials value")
}
if (check_prob(prob) != TRUE){
stop("invalid prob value")
}
if (check_success(success, trials) != TRUE){
stop("invalid success value")
}
else{
binomial = (bin_choose(trials,success))*
(prob^success)*((1-prob)^(trials-success))
return(binomial)
}
}
### 1.5) Function bin_distribution
#' @title binomial distribution
#' @description computes the binomial distribution given number of trials and probability of success
#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed binomial probability
#' @export
#' @examples
#' # binomial probability distribution
#' bin_distribution(trials = 5, prob = 0.5)
#'
#' # another one
#' bin_distribution(trials = 4, prob = 0.2)
bin_distribution = function(trials, prob){
success = 0:trials
prob = bin_probability(success, trials, prob)
object = data.frame(success = success, prob = prob)
class(object) = c("bindis", "data.frame")
return(object)
}
### Function plot_bindis
#' @export
plot_bindis = function(bin_dist){
x = barplot(bind_dist$prob, bind_dist$success, width = 1,
xlab = "successes", ylab = "probability")
return(x)
}
### 1.6) Function bin_cumulative
#' @title binomial cumulative distribution
#' @description computes the cumulative binomial distribution given number of trials and probability of success
#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed cumulative probability
#' @export
#' @examples
#' # binomial cumulative distribution
#' bin_cumulative(trials = 5, prob = 0.5)
#'
#' # another one
#' bin_distribution(trials = 4, prob = 0.2)
bin_cumulative = function(trials, prob){
success = 0:trials
prob = bin_probability(success, trials, prob)
object = data.frame(success = success, prob = prob, cumulative = cumsum(prob))
class(object) = c("bincum", "data.frame")
return(object)
}
### 1.7) Function bin_variable()
#' @title binomial random variable object
#' @description computes the cumulative binomial distribution given number of trials and probability of success
#' @param trials numeric value for number of trials
#' @param prob numeric value for the probability of success
#' @return computed binomial random variable object
#' @export
#' @examples
bin_variable = function(trials, prob){
if (check_trials(trials) != TRUE){
stop("invalid trials value")
}
if (check_prob(prob) != TRUE){
stop("invalid prob value")
}
object = list(trials = trials, prob = prob)
class(object) = "binvar"
return(object)
}
bin_variable(5, 0.5)
