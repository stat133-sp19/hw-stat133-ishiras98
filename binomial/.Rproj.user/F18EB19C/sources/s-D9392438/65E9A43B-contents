---
title: "warmup05-ishira-shrivatsa"
author: "Ishira Shrivatsa"
date: "3/15/2019"
output: html_document
---

Collaborated with Neil Sharma 

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, error = TRUE)
```


### 1) Gaussian Function

```{r}
#' @title gaussian function 
#' @description computes probability density 
#' @param x numeric vector for x
#' @param m numeric vector for mu
#' @param s numeric vector for sigma 
#' @return computed probability density 
gaussian <- function(x = 0, m = 0, s = 1) {
  if (s <= 0) {
    stop("s must be greater than zero")
  }
  prob_density <- (1/(s*sqrt(2*pi)))* (exp(1))^((-0.5)*((x-m)/s)^2)
  return(prob_density)
}
```

```{r}
# test set 1
gaussian(x = 0, m = 0, s = 1)
gaussian(x = 1, m = 0, s = 2)
```

```{r}
# test set 2
gaussian(x = 1, m = 0, s = 0)
gaussian(x = 1, m = 0, s = -1)
```

```{r}
# gaussian curve
x_values <- seq(from = -4.5, to = 4.5, by = 0.1)
y_values <- gaussian(x_values, m = 0, s = 2)
plot(x_values, y_values, las = 1, type = "l", lwd = 2)
```

```{r}

## Gaussian function values 

x_values <- seq(from = -5, to = 5, by = 0.01)
y_values1 <- gaussian(x_values, m = 0, s = sqrt(0.2))
y_values2 <- gaussian(x_values, m = 0, s = 1)
y_values3 <- gaussian(x_values, m = 0, s = sqrt(5))
y_values4 <- gaussian(x_values, m = -2, s = sqrt(0.5))

## Labels 

xlab = expression(x)
ylab = expression(phi[mu][","][sigma^2](x))

## Legend

legend1 = expression(paste(mu, "= 0, ", sigma^2, "= 0.2"))
legend2 = expression(paste(mu, "= 0, ", sigma^2, "= 1.0"))
legend3 = expression(paste(mu, "= 0, ", sigma^2, "= 5.0"))
legend4 = expression(paste(mu, "= 0, ", sigma^2, "= 0.5"))

                  
## Plots 
 
plot(x_values, y_values1, las = 1, type = "l", lwd = 2, col = "#003366", xlab = xlab, ylab = ylab)
lines(x_values, y_values2, las = 1, type = "l", lwd = 2, col = "#FF0000")
lines(x_values, y_values3, las = 1, type = "l", lwd = 2, col = "#FFA500")
lines(x_values, y_values4, las = 1, type = "l", lwd = 2, col = "#008000")
legend("topright",legend = c(legend1, legend2, legend3, legend4), col = c("#003366", "#FF0000", "#FFA500", "#008000"), lty = 1, cex = 0.8)

```

### 2) Descriptive Statistics 

```{r}
#' @title descriptive statistics
#' @description computes descriptive statistics 
#' @param x numeric vector for x
#' @param na.rm whether to remove missing arguments
#' @return named vector with computed summary statistics
descriptive <- function(x = 0, na.rm = FALSE) {
  if (mode(x) != "numeric") {
    stop("x must be a numeric vector")
  }
  if (na.rm) {
    x <- x[!is.na(x)]
   }
  min = min(x)
  q1 = quantile(x)[2]
  median = median(x)
  mean = mean(x)
  q3 = quantile(x)[4]
  max = max(x)
  range = max - min
  iqr = IQR(x)
  sd = sd(x)
  named_vector = c(min, q1, median, mean, q3, max, range, iqr, sd)
  names(named_vector) = c("min", "q1", "median", "mean", "q3", "max", "range", "iqr", "sd")
  return(named_vector)
  
}
```


```{r}
# input vectors
set.seed(100)
x <- rnorm(100)
y <- x
y[sample(1:100, size = 10)] <- NA

# test set 1
descriptive(x)
descriptive(y)
descriptive(y, na.rm = TRUE)
descriptive(letters)

# test set 2
a <- descriptive(x)
class(a)
length(a)
names(a)
```


### 3) Minkowski Distance 

```{r}
#' @title minkowski distance
#' @description computes the minkowski distance of order p
#' @param x numeric vector for one point
#' @param y numeric vector for the other point 
#' @param p either a numeric value greater than 1, or a character string "max"
#' @return computed minkowski distance 
minkowski = function(x, y, p = 1) {
  if (length(x) != length(y)) {
    stop("x and y have different lengths")
} 
  if (mode(p) == "numeric" & p <1) {
  stop("p cannot be less than 1")
} 
  if (mode(p) == "character" & p != "max") {
  stop("invalid character value for p")
}
  else if (mode(p) == "numeric" & p >= 1) {
    d1 = (abs(x-y)^p)^(1/p)
    distance = sum(d1)
    return(distance)
} 
  else if (mode(p) == "character" & p == "max") {
    d2 = abs(x-y)
    infinity_d = max(d2)
    return(infinity_d)
}
}
```

```{r}
# some points
point1 <- c(0, 0)
point2 <- c(1, 1)
point3 <- sqrt(c(2, 2))
point4 <- c(0, 1)
point5 <- c(1, 1, 1)

# test set 1
minkowski(point1, point2, p = 1)
minkowski(point1, point3, p = 2)
minkowski(point1, point2, p = 'max')

# test set 2
minkowski(point4, point5, p = 1)
minkowski(point1, point2, p = 0.5)
minkowski(point1, point2, p = 'min')
```

