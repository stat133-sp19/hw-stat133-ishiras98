library(testthat)

context("check the checker functions")

# check_prob

test_that("check_prob works with a number between 0 and 1", {
  expect_true(check_prob(0.5))
  expect_true(check_prob(0.6))
})

test_that("check_prob fails with invalid values", {
  expect_error(check_prob(3))
  expect_error(check_prob(-4))
  expect_error(check_prob("head"))
})

test_that("check_prob fails with length greater than 1", {
  expect_error(check_prob(1:3))
  expect_error(check_prob(c(1,2,5)))
})

# check_trials

test_that("check_trials works with non-negative numbers",{
  expect_true(check_trials(5))
  expect_true(check_trials(0))
})

test_that("check_trials fails with invalid numbers",{
  expect_error(check_trials(-1))
  expect_error(check-trials(5.5))
})

test_that("check_trials fails with invalid lengths",{
  expect_error(check_trials(1:3))
  expect_error(check_trials(c(1, 5, 4)))
})

# check_success

test_that("check_success works with a vector of valid length",{
  expect_true(check_success(1:4, 5))
  expect_true(check_success(1:3, 5))
})

test_that("check_success fails with invalid numbers", {
  expect_error(check_success(5, -3))
  expect_error(check_success(5, 2.5))
})

test_that("check_success fails when success > trials",{
  expect_error(check_success(6, 5))
  expect_error(check_success(1:4, 2))
})

context("check summary measures")

# aux_mean

test_that("aux_mean works as expected", {
  trials = 5
  prob = 0.5
  expect_equal(aux_mean(trials, prob), 2.5)
  expect_length(aux_mean(trials, prob), 1)
  expect_type(aux_mean(trials, prob), "double")
})

# aux_variance

test_that("aux_variance works as expected", {
  trials = 5
  prob = 0.6
  expect_equal(aux_variance(trials, prob), 5*0.6*0.4)
  expect_length(aux_variance(trials, prob), 1)
  expect_type(aux_variance(trials, prob), "double")
})

# aux_mode

test_that("aux_mode works as expected", {
  n = 5
  p = 0.6
  n1 = 9
  p1 = 0.3
  expect_equal(aux_mode(n, p), floor(n*p + p))
  expect_equal(aux_mode(n1, p1), c((n1*p1 + p1), (n1*p1 + p1)- 1))
  expect_length(aux_mode(n, p), 1)
  expect_length(aux_mode(n1, p1), 2)
  expect_type(aux_mode(n, p), "double")
  expect_type(aux_mode(n1, p1), "double")
})

# aux_skewness

test_that("aux_skewness works as expected", {
  trials = 5
  prob = 0.6
  expect_equal(aux_skewness(trials, prob), (-0.2)/sqrt(5*0.6*0.4))
  expect_length(aux_skewness(trials, prob), 1)
  expect_type(aux_skewness(trials, prob), "double")
})
# aux_kurtosis

test_that("aux_kurtosis works as expected", {
  trials = 5
  prob = 0.6
  expect_equal(aux_kurtosis(trials, prob), (1- ((6*0.6)*(0.4)))/((5*0.6)*(0.4)))
  expect_length(aux_kurtosis(trials, prob), 1)
  expect_type(aux_kurtosis(trials, prob), "double")
})

context("check binomial arguments")

# bin_choose

test_that("bin_choose works as expected", {
  n = 5
  k = 2
  expect_equal(bin_choose(n, k), 10)
  expect_length(bin_choose(n, k), 1)
  expect_type(bin_choose(n, k), "double")
})

# bin_probability

test_that("bin_probability works as expected", {
  n = 5
  k = 2
  p = 0.5
  expect_equal(bin_probability(k, n, p), (10* p^k * (1-p)^(n-k)))
  expect_length(bin_probability(k, n, p), 1)
  expect_type(bin_probability(k, n, p), "double")
})

# bin_distribution

test_that("bin_distribution works as expected", {
  trials = 5
  success = 2
  prob = 0.5
  expect_equal(typeof(bin_distribution(trials, prob)), "list")
  expect_is(bin_distribution(trials, prob), c("bindis", "data.frame"))
  expect_length(bin_distribution(trials, prob), 2)
})

# bin_cumulative

test_that("bin_cumulative works as expected", {
  trials = 5
  success = 2
  prob = 0.5
  expect_equal(typeof(bin_distribution(trials, prob)), "list")
  expect_is(bin_distribution(trials, prob), c("bincum", "data.frame"))
  expect_length(bin_distribution(trials, prob), 2)
})


